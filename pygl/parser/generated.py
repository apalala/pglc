#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by TatSu.
#
#    https://pypi.python.org/pypi/tatsu/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import generator_stop

import sys

from tatsu.buffering import Buffer
from tatsu.parsing import Parser
from tatsu.parsing import tatsumasu, leftrec, nomemo
from tatsu.parsing import leftrec, nomemo  # noqa
from tatsu.util import re, generic_main  # noqa


KEYWORDS = {
    'False',
    'True',
    'as',
    'or',
    'from',
    'async',
    'return',
    'except',
    'and',
    'elif',
    'pass',
    'is',
    'class',
    'import',
    'yield',
    'while',
    'else',
    'try',
    'raise',
    'in',
    'None',
    'break',
    'continue',
    'global',
    'assert',
    'with',
    'nonlocal',
    'def',
    'lambda',
    'for',
    'if',
    'await',
    'not',
    'finally',
    'del',
}  # type: ignore


class PythonBuffer(Buffer):
    def __init__(
        self,
        text,
        whitespace=re.compile('(?:(?!\\r?\\n|\\r)(?:\\s|\\\\\\n))+'),
        nameguard=True,
        comments_re=None,
        eol_comments_re='(?ms)(?:(?!\\n)\\s)*#[^\\n]*?(?=\\n|$)',
        ignorecase=None,
        namechars='_',
        **kwargs
    ):
        super().__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class PythonParser(Parser):
    def __init__(
        self,
        whitespace=re.compile('(?:(?!\\r?\\n|\\r)(?:\\s|\\\\\\n))+'),
        nameguard=True,
        comments_re=None,
        eol_comments_re='(?ms)(?:(?!\\n)\\s)*#[^\\n]*?(?=\\n|$)',
        ignorecase=None,
        left_recursion=False,
        parseinfo=True,
        keywords=None,
        namechars='_',
        tokenizercls=PythonBuffer,
        **kwargs
    ):
        if keywords is None:
            keywords = KEYWORDS
        super().__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            tokenizercls=tokenizercls,
            **kwargs
        )

    @tatsumasu()
    def _start_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._file_input_()
                with self._option():
                    self._eval_input_()
                with self._option():
                    self._single_input_()
                self._error('no available options')
        self.name_last_node('@')
        self._check_eof()

    @tatsumasu()
    def _single_input_(self):  # noqa
        with self._choice():
            with self._option():
                self._compound_stmt_()
                self.name_last_node('@')
                self._NEWLINE_()
            with self._option():
                self._simple_stmt_()
                self.name_last_node('@')
            with self._option():
                self._NEWLINE_()
            self._error('no available options')

    @tatsumasu()
    def _file_input_(self):  # noqa
        with self._optional():
            self._ENCODING_()
        self.name_last_node('encoding')

        def block2():
            self.___()
            self._stmt_()
            self.___()
        self._closure(block2)
        self.name_last_node('stmt')
        self.___()
        self._ENDMARKER_()
        self.ast._define(
            ['encoding', 'stmt'],
            []
        )

    @tatsumasu()
    def _eval_input_(self):  # noqa
        self._testlist_()
        self.name_last_node('@')
        self.___()
        self._ENDMARKER_()

    @tatsumasu()
    def _decorator_(self):  # noqa
        self._token('@')
        self._dotted_name_()
        self.name_last_node('name')
        with self._optional():
            self._token('(')
            self._cut()
            with self._optional():
                self._arglist_()
            self.name_last_node('args')
            self.___()
            self._token(')')
        self._NEWLINE_()
        self.ast._define(
            ['args', 'name'],
            []
        )

    @tatsumasu()
    def _decorators_(self):  # noqa

        def block0():
            self._decorator_()
        self._positive_closure(block0)

    @tatsumasu()
    def _decorated_(self):  # noqa
        self._decorators_()
        self.name_last_node('decorators')
        with self._group():
            with self._choice():
                with self._option():
                    self._classdef_()
                with self._option():
                    self._funcdef_()
                with self._option():
                    self._async_funcdef_()
                self._error('no available options')
        self.name_last_node('def_')
        self.ast._define(
            ['decorators', 'def_'],
            []
        )

    @tatsumasu()
    def _async_funcdef_(self):  # noqa
        self._token('async')
        self._funcdef_()
        self.name_last_node('@')

    @tatsumasu()
    def _funcdef_(self):  # noqa
        self._token('def')
        self._cut()
        self._name_()
        self.name_last_node('name')
        self._parameters_()
        self.name_last_node('args')
        with self._optional():
            self._token('->')
            self._test_()
            self.name_last_node('type')
        self._token(':')
        self._cut()
        with self._optional():
            self._TYPE_COMMENT_()
            self.name_last_node('type')
            self._cut()
        self._func_body_suite_()
        self.name_last_node('body')
        self.ast._define(
            ['args', 'body', 'name', 'type'],
            []
        )

    @tatsumasu()
    def _parameters_(self):  # noqa
        self._token('(')
        self.___()
        with self._optional():
            self._typedargslist_()
        self.name_last_node('@')
        self.___()
        self._token(')')

    @tatsumasu()
    def _typedargslist_(self):  # noqa
        self._parameter_list_()

    @tatsumasu()
    def _parameter_list_(self):  # noqa
        with self._choice():
            with self._option():
                self._parameter_list_posonly_()
                self._cut()
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._parameter_list_no_posonly_()
            with self._option():
                self._parameter_list_no_posonly_()
            self._error('no available options')

    @tatsumasu()
    def _parameter_list_posonly_(self):  # noqa
        self._defparameter_()

        def block0():
            self._token(',')
            with self._optional():
                self._typec_()
            self._defparameter_()
        self._closure(block0)
        self._token(',')
        with self._optional():
            self._typec_()
        self._token('/')

    @tatsumasu()
    def _parameter_list_no_posonly_(self):  # noqa
        with self._choice():
            with self._option():
                self._defparameter_()

                def block0():
                    self._token(',')
                    with self._optional():
                        self._typec_()
                    self._defparameter_()
                self._closure(block0)
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._typec_()
                    with self._optional():
                        self._parameter_list_starargs_()
            with self._option():
                self._parameter_list_starargs_()
            self._error('no available options')

    @tatsumasu()
    def _parameter_list_starargs_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('**')
                self._cut()
                self._parameter_()
                with self._optional():
                    self._token(',')
                    self._cut()
                    with self._optional():
                        self._typec_()
            with self._option():
                self._token('*')
                self._cut()
                with self._optional():
                    self._parameter_()

                def block0():
                    self._token(',')
                    with self._optional():
                        self._typec_()
                    self._defparameter_()
                self._closure(block0)
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._typec_()
                    with self._optional():
                        self._token('**')
                        self._cut()
                        self._parameter_()
                        with self._optional():
                            self._token(',')
                            self._cut()
                            with self._optional():
                                self._typec_()
            self._error('no available options')

    @tatsumasu()
    def _defparameter_(self):  # noqa
        self._parameter_()
        self.name_last_node('param')
        with self._optional():
            self._token('=')
            self._cut()
            self._expression_()
            self.name_last_node('value')
        self.ast._define(
            ['param', 'value'],
            []
        )

    @tatsumasu()
    def _parameter_(self):  # noqa
        self._identifier_()
        self.name_last_node('name')
        with self._optional():
            self._token(':')
            self._cut()
            self._expression_()
            self.name_last_node('type')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @tatsumasu()
    def _identifier_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _expression_(self):  # noqa
        self._test_()

    @tatsumasu()
    def _typec_(self):  # noqa
        self._TYPE_COMMENT_()
        self._cut()

    @tatsumasu()
    def ___original_typedargslist_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('**')
                self._cut()
                self._tfpdef_()
                with self._optional():
                    self._token(',')
                with self._optional():
                    self._TYPE_COMMENT_()
            with self._option():
                self._token('*')
                with self._ifnot():
                    self._token('*')
                self._cut()
                with self._optional():
                    self._tfpdef_()

                def block0():
                    self._token(',')
                    with self._optional():
                        self._TYPE_COMMENT_()
                    self.___()
                    self._tfpdef_()
                    self._cut()
                    with self._optional():
                        self._token('=')
                        self._cut()
                        self._test_()
                self._closure(block0)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._TYPE_COMMENT_()
                        with self._option():
                            with self._optional():
                                self._token(',')
                                with self._optional():
                                    self._TYPE_COMMENT_()
                                with self._optional():
                                    self.___()
                                    self._token('**')
                                    self._tfpdef_()
                                    with self._optional():
                                        self._token(',')
                                    with self._optional():
                                        self._TYPE_COMMENT_()
                        self._error('no available options')
            with self._option():
                self._tfpdef_()
                with self._optional():
                    self._token('=')
                    self._test_()

                def block2():
                    self._token(',')
                    self.___()
                    with self._optional():
                        self._TYPE_COMMENT_()
                    self._tfpdef_()
                    self._cut()
                    with self._optional():
                        self._token('=')
                        self._test_()
                self._closure(block2)
                with self._group():
                    with self._choice():
                        with self._option():
                            self._TYPE_COMMENT_()
                        with self._option():
                            with self._optional():
                                self._token(',')
                                with self._optional():
                                    self._TYPE_COMMENT_()
                                with self._optional():
                                    with self._choice():
                                        with self._option():
                                            self._token('**')
                                            self._cut()
                                            self._tfpdef_()
                                            with self._optional():
                                                self._token(',')
                                            with self._optional():
                                                self._TYPE_COMMENT_()
                                        with self._option():
                                            self._token('*')
                                            with self._ifnot():
                                                self._token('*')
                                            self._cut()
                                            with self._optional():
                                                self._tfpdef_()

                                            def block3():
                                                self._token(',')
                                                self.___()
                                                with self._optional():
                                                    self._TYPE_COMMENT_()
                                                self._tfpdef_()
                                                self._cut()
                                                with self._optional():
                                                    self._token('=')
                                                    self._cut()
                                                    self._test_()
                                            self._closure(block3)
                                            with self._group():
                                                with self._choice():
                                                    with self._option():
                                                        self._TYPE_COMMENT_()
                                                    with self._option():
                                                        with self._optional():
                                                            self._token(',')
                                                            with self._optional():
                                                                self._TYPE_COMMENT_()
                                                            with self._optional():
                                                                self.___()
                                                                self._token('**')
                                                                self._tfpdef_()
                                                                with self._optional():
                                                                    self._token(',')
                                                                with self._optional():
                                                                    self._TYPE_COMMENT_()
                                                    self._error('no available options')
                                        self._error('no available options')
                        self._error('no available options')
            self._error('no available options')

    @tatsumasu()
    def _tfpdef_(self):  # noqa
        self._name_()
        self.name_last_node('name')
        with self._optional():
            self._token(':')
            self._cut()
            self._test_()
            self.name_last_node('type')
        self.ast._define(
            ['name', 'type'],
            []
        )

    @tatsumasu()
    def _vfpdef_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _varargslist_(self):  # noqa
        with self._choice():
            with self._option():
                self._posarglist_()
                self.name_last_node('@')
                self._cut()
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._varargslist_no_posonly_()
                    self.name_last_node('@')
            with self._option():
                self._varargslist_no_posonly_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _posarglist_(self):  # noqa
        self._vararg_()
        self.name_last_node('@')

        def block1():
            self._token(',')
            self._vararg_()
            self.name_last_node('@')
        self._closure(block1)
        self._token(',')
        self._token('/')

    @tatsumasu()
    def _varargslist_no_posonly_(self):  # noqa
        with self._choice():
            with self._option():
                self._vararg_()
                self.name_last_node('@')

                def block1():
                    self._token(',')
                    self._vararg_()
                    self.name_last_node('@')
                self._closure(block1)
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._varargslist_starargs_()
                    self.name_last_node('@')
            with self._option():
                self._varargslist_starargs_()
                self.name_last_node('@')
            self._error('no available options')

    @tatsumasu()
    def _varargslist_starargs_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('**')
                self._cut()
                self._vararg_()
                with self._optional():
                    self._token(',')
                    self._cut()
            with self._option():
                self._token('*')
                self._cut()
                with self._optional():
                    self._vararg_()

                def block0():
                    self._token(',')
                    self._vararg_()
                self._closure(block0)
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._token('**')
                        self._cut()
                        self._vararg_()
                        with self._optional():
                            self._token(',')
                            self._cut()
            self._error('no available options')

    @tatsumasu()
    def _vararg_(self):  # noqa
        self._name_()
        self.name_last_node('name')
        with self._optional():
            self._token('=')
            self._cut()
            self._expression_()
            self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu()
    def ___original_varargslist_(self):  # noqa
        with self._choice():
            with self._option():
                self._vfpdef_()
                with self._optional():
                    self._token('=')
                    self.___()
                    self._test_()

                def block0():
                    self._token(',')
                    self._vfpdef_()
                    with self._optional():
                        self._token('=')
                        self.___()
                        self._test_()
                self._closure(block0)
                with self._optional():
                    self._token(',')
                    with self._optional():
                        with self._choice():
                            with self._option():
                                self._token('*')
                                with self._optional():
                                    self._vfpdef_()

                                def block1():
                                    self._token(',')
                                    self._vfpdef_()
                                    with self._optional():
                                        self._token('=')
                                        self.___()
                                        self._test_()
                                self._closure(block1)
                                with self._optional():
                                    self._token(',')
                                    with self._optional():
                                        self._token('**')
                                        self._vfpdef_()
                                        with self._optional():
                                            self._token(',')
                            with self._option():
                                self._token('**')
                                self._vfpdef_()
                                with self._optional():
                                    self._token(',')
                            self._error('no available options')
            with self._option():
                self._token('*')
                with self._optional():
                    self._vfpdef_()

                def block3():
                    self._token(',')
                    self._vfpdef_()
                    with self._optional():
                        self._token('=')
                        self.___()
                        self._test_()
                self._closure(block3)
                with self._optional():
                    self._token(',')
                    with self._optional():
                        self._token('**')
                        self._vfpdef_()
                        with self._optional():
                            self._token(',')
            with self._option():
                self._token('**')
                self._vfpdef_()
                with self._optional():
                    self._token(',')
            self._error('no available options')

    @tatsumasu()
    def _stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._compound_stmt_()
            with self._option():
                self._simple_stmt_()
            self._error('no available options')

    @tatsumasu()
    def _simple_stmt_(self):  # noqa
        self._small_stmt_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(';')
            self.___()
            self._small_stmt_()
            self.add_last_node_to_name('@')
            self._cut()
        self._closure(block1)
        with self._optional():
            self._token(';')
            self._cut()
        self._NEWLINE_()

    @tatsumasu()
    def _small_stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._expr_stmt_()
            with self._option():
                self._flow_stmt_()
            with self._option():
                self._del_stmt_()
            with self._option():
                self._pass_stmt_()
            with self._option():
                self._global_stmt_()
            with self._option():
                self._nonlocal_stmt_()
            with self._option():
                self._assert_stmt_()
            with self._option():
                self._import_stmt_()
            self._error('no available options')

    @tatsumasu()
    def _string_stmt_(self):  # noqa
        self._string_()

    @tatsumasu()
    def _expr_stmt_(self):  # noqa
        self._testlist_star_expr_()
        self.add_last_node_to_name('exp')
        with self._group():
            with self._choice():
                with self._option():
                    self._annassign_()
                    self.name_last_node('op')
                with self._option():
                    self._augassign_()
                    self.name_last_node('op')
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._yield_expr_()
                            with self._option():
                                self._testlist_()
                            self._error('no available options')
                    self.name_last_node('value')
                with self._option():

                    def block5():
                        self._token('=')
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._yield_expr_()
                                with self._option():
                                    self._testlist_star_expr_()
                                self._error('no available options')
                        self.add_last_node_to_name('exp')
                    self._positive_closure(block5)
                    with self._optional():
                        self._TYPE_COMMENT_()
                with self._option():
                    self._void()
                self._error('no available options')
        self.ast._define(
            ['op', 'value'],
            ['exp']
        )

    @tatsumasu()
    def _annassign_(self):  # noqa
        self._token(':')
        self._cut()
        self._test_()
        self.name_last_node('type')
        with self._optional():
            self._token('=')
            self._cut()
            with self._group():
                with self._choice():
                    with self._option():
                        self._yield_expr_()
                    with self._option():
                        self._testlist_()
                    self._error('no available options')
            self.name_last_node('value')
        self.ast._define(
            ['type', 'value'],
            []
        )

    @tatsumasu()
    def _testlist_star_expr_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._test_()
                with self._option():
                    self._star_expr_()
                self._error('no available options')
        self.name_last_node('@')

        def block2():
            self._token(',')
            self.___()
            with self._group():
                with self._choice():
                    with self._option():
                        self._test_()
                    with self._option():
                        self._star_expr_()
                    self._error('no available options')
            self.name_last_node('@')
        self._closure(block2)
        with self._optional():
            self._token(',')
            self._cut()

    @tatsumasu()
    def _augassign_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('+=')
            with self._option():
                self._token('-=')
            with self._option():
                self._token('*=')
            with self._option():
                self._token('@=')
            with self._option():
                self._token('/=')
            with self._option():
                self._token('%=')
            with self._option():
                self._token('&=')
            with self._option():
                self._token('|=')
            with self._option():
                self._token('^=')
            with self._option():
                self._token('<<=')
            with self._option():
                self._token('>>=')
            with self._option():
                self._token('**=')
            with self._option():
                self._token('//=')
            self._error('no available options')

    @tatsumasu()
    def _del_stmt_(self):  # noqa
        self._token('del')
        self._cut()
        self._exprlist_()
        self.name_last_node('@')

    @tatsumasu()
    def _pass_stmt_(self):  # noqa
        self._token('pass')
        self._cut()

    @tatsumasu()
    def _flow_stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._break_stmt_()
            with self._option():
                self._continue_stmt_()
            with self._option():
                self._return_stmt_()
            with self._option():
                self._raise_stmt_()
            with self._option():
                self._yield_stmt_()
            self._error('no available options')

    @tatsumasu()
    def _break_stmt_(self):  # noqa
        self._token('break')
        self._cut()

    @tatsumasu()
    def _continue_stmt_(self):  # noqa
        self._token('continue')
        self._cut()

    @tatsumasu()
    def _return_stmt_(self):  # noqa
        self._token('return')
        self._cut()
        with self._optional():
            self._testlist_star_expr_()
        self.name_last_node('@')

    @tatsumasu()
    def _yield_stmt_(self):  # noqa
        self._yield_expr_()
        self._cut()

    @tatsumasu()
    def _raise_stmt_(self):  # noqa
        self._token('raise')
        self._cut()
        with self._optional():
            self._test_()
            self.name_last_node('test')
            with self._optional():
                self._token('from')
                self._cut()
                self._test_()
                self.name_last_node('from_')
        self.ast._define(
            ['from_', 'test'],
            []
        )

    @tatsumasu()
    def _import_stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._import_name_()
            with self._option():
                self._import_from_()
            self._error('no available options')

    @tatsumasu()
    def _import_name_(self):  # noqa
        self._token('import')
        self._cut()
        self._dotted_as_names_()
        self.name_last_node('@')

    @tatsumasu()
    def _import_from_(self):  # noqa
        self._token('from')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():

                    def block1():
                        with self._choice():
                            with self._option():
                                self._token('.')
                            with self._option():
                                self._token('...')
                            self._error('no available options')
                    self._closure(block1)
                    self.name_last_node('up')
                    self._dotted_name_()
                    self.name_last_node('parent')
                with self._option():

                    def block5():
                        with self._choice():
                            with self._option():
                                self._token('.')
                            with self._option():
                                self._token('...')
                            self._error('no available options')
                    self._positive_closure(block5)
                    self.name_last_node('up')
                self._error('no available options')
        self._token('import')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._token('*')
                    self._cut()
                with self._option():
                    self._token('(')
                    self.___()
                    self._cut()
                    self._import_as_names_()
                    self.name_last_node('modules')
                    self.___()
                    self._token(')')
                with self._option():
                    self._import_as_names_()
                    self.name_last_node('modules')
                self._error('no available options')
        self.ast._define(
            ['modules', 'parent', 'up'],
            []
        )

    @tatsumasu()
    def _import_as_name_(self):  # noqa
        self._name_()
        self.name_last_node('name')
        with self._optional():
            self._token('as')
            self._cut()
            self._name_()
            self.name_last_node('as_')
        self.ast._define(
            ['as_', 'name'],
            []
        )

    @tatsumasu()
    def _dotted_as_name_(self):  # noqa
        self._dotted_name_()
        self.name_last_node('name')
        with self._optional():
            self._token('as')
            self._cut()
            self._name_()
            self.name_last_node('as_')
        self.ast._define(
            ['as_', 'name'],
            []
        )

    @tatsumasu()
    def _import_as_names_(self):  # noqa
        self._import_as_name_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self.___()
            self._import_as_name_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        with self._optional():
            self._token(',')
            self._cut()

    @tatsumasu()
    def _dotted_as_names_(self):  # noqa
        self._dotted_as_name_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._dotted_as_name_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _dotted_name_(self):  # noqa
        self._name_()
        self.add_last_node_to_name('@')

        def block1():
            self.___()
            self._token('.')
            self.___()
            self._cut()
            self._name_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _global_stmt_(self):  # noqa
        self._token('global')
        self._cut()
        self._name_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._name_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _nonlocal_stmt_(self):  # noqa
        self._token('nonlocal')
        self._cut()
        self._name_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._cut()
            self._name_()
            self.add_last_node_to_name('@')
        self._closure(block1)

    @tatsumasu()
    def _assert_stmt_(self):  # noqa
        self._token('assert')
        self._test_()
        self.add_last_node_to_name('@')
        with self._optional():
            self._token(',')
            self._test_()
            self.add_last_node_to_name('@')

    @tatsumasu()
    def _compound_stmt_(self):  # noqa
        with self._choice():
            with self._option():
                self._if_stmt_()
            with self._option():
                self._for_stmt_()
            with self._option():
                self._while_stmt_()
            with self._option():
                self._try_stmt_()
            with self._option():
                self._with_stmt_()
            with self._option():
                self._funcdef_()
            with self._option():
                self._classdef_()
            with self._option():
                self._decorated_()
            with self._option():
                self._async_stmt_()
            self._error('no available options')

    @tatsumasu()
    def _async_stmt_(self):  # noqa
        self._token('async')
        self._cut()
        with self._group():
            with self._choice():
                with self._option():
                    self._funcdef_()
                with self._option():
                    self._with_stmt_()
                with self._option():
                    self._for_stmt_()
                self._error('no available options')
        self.name_last_node('@')

    @tatsumasu()
    def _if_stmt_(self):  # noqa
        self._token('if')
        self._cut()
        self._namedexpr_test_()
        self.name_last_node('condition')
        self._token(':')
        self._cut()
        self._suite_()
        self.name_last_node('body')

        def block2():
            self._EQDENT_()
            self._token('elif')
            self._cut()
            self._namedexpr_test_()
            self.add_last_node_to_name('elif_')
            self._token(':')
            self._cut()
            self._suite_()
        self._closure(block2)
        with self._optional():
            self._EQDENT_()
            self._token('else')
            self._cut()
            self._token(':')
            self._cut()
            self._suite_()
            self.name_last_node('else_')
        self.ast._define(
            ['body', 'condition', 'elif_', 'else_'],
            ['elif_']
        )

    @tatsumasu()
    def _while_stmt_(self):  # noqa
        self._token('while')
        self._cut()
        self._namedexpr_test_()
        self.name_last_node('condition')
        self._token(':')
        self._cut()
        self._suite_()
        with self._optional():
            self._EQDENT_()
            self._token('else')
            self._cut()
            self._token(':')
            self._cut()
            self._suite_()
            self.name_last_node('else_')
        self.ast._define(
            ['condition', 'else_'],
            []
        )

    @tatsumasu()
    def _for_stmt_(self):  # noqa
        self._token('for')
        self._cut()
        self._exprlist_()
        self.name_last_node('exp')
        self._token('in')
        self._cut()
        self._testlist_()
        self.name_last_node('target')
        self._token(':')
        self._cut()
        with self._optional():
            self._TYPE_COMMENT_()
            self._cut()
        self._suite_()
        self.name_last_node('body')
        with self._optional():
            self._EQDENT_()
            self._token('else')
            self._cut()
            self._token(':')
            self._cut()
            self._suite_()
            self.name_last_node('else_')
        self.ast._define(
            ['body', 'else_', 'exp', 'target'],
            []
        )

    @tatsumasu()
    def _try_stmt_(self):  # noqa
        self._token('try')
        self._cut()
        self._token(':')
        self._cut()
        self._suite_()
        self.name_last_node('body')
        with self._group():
            with self._choice():
                with self._option():

                    def block1():
                        self._EQDENT_()
                        self._except_clause_()
                        self._cut()
                        self._token(':')
                        self._cut()
                        self._suite_()
                        self.name_last_node('except_')
                    self._positive_closure(block1)
                    self._cut()
                    with self._optional():
                        self._EQDENT_()
                        self._token('else')
                        self._cut()
                        self._token(':')
                        self._cut()
                        self._suite_()
                        self.name_last_node('else_')
                    with self._optional():
                        self._EQDENT_()
                        self._token('finally')
                        self._cut()
                        self._token(':')
                        self._cut()
                        self._suite_()
                        self.name_last_node('finally_')
                with self._option():
                    self._EQDENT_()
                    self._token('finally')
                    self._cut()
                    self._token(':')
                    self._cut()
                    self._suite_()
                    self.name_last_node('finally_')
                self._error('no available options')
        self.ast._define(
            ['body', 'else_', 'except_', 'finally_'],
            []
        )

    @tatsumasu()
    def _with_stmt_(self):  # noqa
        self._token('with')
        self._cut()
        self._with_item_()
        self.add_last_node_to_name('item')

        def block1():
            self._token(',')
            self._with_item_()
            self.add_last_node_to_name('item')
        self._closure(block1)
        self._token(':')
        self._cut()
        with self._optional():
            self._TYPE_COMMENT_()
        self.name_last_node('type')
        self._suite_()
        self.name_last_node('body')
        self.ast._define(
            ['body', 'type'],
            ['item']
        )

    @tatsumasu()
    def _with_item_(self):  # noqa
        self._test_()
        self.name_last_node('item')
        with self._optional():
            self._token('as')
            self._expr_()
            self.name_last_node('as_')
        self.ast._define(
            ['as_', 'item'],
            []
        )

    @tatsumasu()
    def _except_clause_(self):  # noqa
        self._token('except')
        self._cut()
        with self._optional():
            self._test_()
            self.name_last_node('test')
            with self._optional():
                self._token('as')
                self._name_()
                self.name_last_node('as_')
        self.ast._define(
            ['as_', 'test'],
            []
        )

    @tatsumasu()
    def _suite_(self):  # noqa
        with self._choice():
            with self._option():
                self._NEWLINE_()
                self._cut()
                self._INDENT_()
                self._stmt_()
                self.add_last_node_to_name('stmt')
                self._cut()

                def block1():
                    self._EQDENT_()
                    self._stmt_()
                    self.add_last_node_to_name('stmt')
                    self._cut()
                self._closure(block1)
                self._cut()
                self._DEDENT_()
            with self._option():
                self._simple_stmt_()
                self.add_last_node_to_name('stmpt')
            self._error('no available options')
        self.ast._define(
            [],
            ['stmpt', 'stmt']
        )

    @tatsumasu()
    def _namedexpr_test_(self):  # noqa
        self._test_()
        self.name_last_node('name')
        with self._optional():
            self._token(':=')
            self._cut()
            self._test_()
            self.name_last_node('value')
        self.ast._define(
            ['name', 'value'],
            []
        )

    @tatsumasu()
    def _test_(self):  # noqa
        with self._choice():
            with self._option():
                self._lambdef_()
            with self._option():
                self._ordef_()
            self._error('no available options')

    @tatsumasu()
    def _ordef_(self):  # noqa
        self._or_test_()
        self.name_last_node('value')
        with self._optional():
            self.___()
            self._token('if')
            self.___()
            self._or_test_()
            self.name_last_node('condition')
            self.___()
            self._token('else')
            self._cut()
            self.___()
            self._cut()
            self._test_()
            self.name_last_node('else_')
        self.ast._define(
            ['condition', 'else_', 'value'],
            []
        )

    @tatsumasu()
    def _test_nocond_(self):  # noqa
        with self._choice():
            with self._option():
                self._or_test_()
            with self._option():
                self._lambdef_nocond_()
            self._error('no available options')

    @tatsumasu()
    def _lambdef_(self):  # noqa
        self._token('lambda')
        self._cut()
        with self._optional():
            self._varargslist_()
            self.name_last_node('args')
        self._token(':')
        self._cut()
        self.___()
        self._test_()
        self.name_last_node('exp')
        self.ast._define(
            ['args', 'exp'],
            []
        )

    @tatsumasu()
    def _lambdef_nocond_(self):  # noqa
        self._token('lambda')
        with self._optional():
            self._varargslist_()
            self.name_last_node('args')
        self._token(':')
        self._cut()
        self._test_nocond_()
        self.name_last_node('exp')
        self.ast._define(
            ['args', 'exp'],
            []
        )

    @tatsumasu()
    def _or_test_(self):  # noqa
        self._and_test_()
        self.name_last_node('value')

        def block1():
            self.___()
            self._token('or')
            self._cut()
            self.___()
            self._and_test_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _and_test_(self):  # noqa
        self._not_test_()
        self.name_last_node('value')

        def block1():
            self.___()
            self._token('and')
            self._cut()
            self.___()
            self._not_test_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _not_test_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('not')
                self._not_test_()
                self.name_last_node('value')
            with self._option():
                self._comparison_()
                self.name_last_node('@')
            self._error('no available options')
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _comparison_(self):  # noqa
        self._expr_()
        self.name_last_node('value')

        def block2():
            self.___()
            self._comp_op_()
            self.___()
            self._cut()
            self._expr_()
            self.name_last_node('value')
        self._closure(block2)
        self.name_last_node('op')
        self.ast._define(
            ['op', 'value'],
            []
        )

    @tatsumasu()
    def _comp_op_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('==')
            with self._option():
                self._token('>=')
            with self._option():
                self._token('<=')
            with self._option():
                self._token('<>')
            with self._option():
                self._token('<')
                with self._ifnot():
                    self._token('<')
            with self._option():
                self._token('>')
                with self._ifnot():
                    self._token('>')
            with self._option():
                self._token('!=')
            with self._option():
                self._token('not')
                self._token('in')
            with self._option():
                self._token('in')
            with self._option():
                self._token('is')
                self._token('not')
            with self._option():
                self._token('is')
            self._error('no available options')

    @tatsumasu()
    def _star_expr_(self):  # noqa
        self._token('*')
        self._cut()
        self._expr_()
        self.name_last_node('@')

    @tatsumasu()
    def _expr_(self):  # noqa
        self._xor_expr_()
        self.name_last_node('value')

        def block1():
            self._token('|')
            with self._ifnot():
                self._token('=')
            self._cut()
            self.___()
            self._xor_expr_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _xor_expr_(self):  # noqa
        self._and_expr_()
        self.name_last_node('value')

        def block1():
            self._token('^')
            with self._ifnot():
                self._token('=')
            self._cut()
            self.___()
            self._and_expr_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _and_expr_(self):  # noqa
        self._shift_expr_()
        self.name_last_node('value')

        def block1():
            self._token('&')
            with self._ifnot():
                self._token('=')
            self._cut()
            self.___()
            self._shift_expr_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['value'],
            []
        )

    @tatsumasu()
    def _shift_expr_(self):  # noqa
        self._arith_expr_()
        self.name_last_node('value')

        def block1():
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('<<')
                    with self._option():
                        self._token('>>')
                    self._error('no available options')
            self.name_last_node('op')
            with self._ifnot():
                self._token('=')
            self._cut()
            self.___()
            self._arith_expr_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['op', 'value'],
            []
        )

    @tatsumasu()
    def _arith_expr_(self):  # noqa
        self._term_()
        self.name_last_node('value')

        def block1():
            self.___()
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('+')
                    with self._option():
                        self._token('-')
                    self._error('no available options')
            self.name_last_node('op')
            with self._ifnot():
                self._token('=')
            self._cut()
            self.___()
            self._term_()
            self.name_last_node('op')
        self._closure(block1)
        self.ast._define(
            ['op', 'value'],
            []
        )

    @tatsumasu()
    def _term_(self):  # noqa
        self._factor_()
        self.name_last_node('value')

        def block1():
            self.___()
            with self._group():
                with self._choice():
                    with self._option():
                        self._token('*')
                        with self._ifnot():
                            self._token('*')
                    with self._option():
                        self._token('@')
                    with self._option():
                        self._token('%')
                    with self._option():
                        self._token('//')
                    with self._option():
                        self._token('/')
                    self._error('no available options')
            self.name_last_node('op')
            with self._ifnot():
                self._token('=')
            self._cut()
            self.___()
            self._factor_()
            self.name_last_node('value')
        self._closure(block1)
        self.ast._define(
            ['op', 'value'],
            []
        )

    @tatsumasu()
    def _factor_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._token('+')
                        with self._option():
                            self._token('-')
                        with self._option():
                            self._token('~')
                        self._error('no available options')
                self.name_last_node('op')
                self._cut()
                self._factor_()
                self.name_last_node('value')
            with self._option():
                self._power_()
                self.name_last_node('value')
            self._error('no available options')
        self.ast._define(
            ['op', 'value'],
            []
        )

    @tatsumasu()
    def _power_(self):  # noqa
        self._atom_expr_()
        self.name_last_node('value')
        with self._optional():
            self._token('**')
            with self._ifnot():
                self._token('=')
            self._cut()
            self._factor_()
            self.name_last_node('exp')
        self.ast._define(
            ['exp', 'value'],
            []
        )

    @tatsumasu()
    def _atom_expr_(self):  # noqa
        with self._optional():
            self._token('await')
            self._cut()
        self.name_last_node('await_')
        self._atom_()
        self.name_last_node('value')

        def block2():
            self._trailer_()
        self._closure(block2)
        self.ast._define(
            ['await_', 'value'],
            []
        )

    @tatsumasu()
    def _atom_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    with self._group():
                        with self._choice():
                            with self._option():
                                self._token('(')
                                self.___()
                                with self._optional():
                                    with self._choice():
                                        with self._option():
                                            self._yield_expr_()
                                        with self._option():
                                            self._testlist_comp_()
                                        self._error('no available options')
                                self.name_last_node('@')
                                self.___()
                                self._token(')')
                            with self._option():
                                self._token('[')
                                self.___()
                                with self._optional():
                                    self._testlist_comp_()
                                self.name_last_node('@')
                                self.___()
                                self._token(']')
                            with self._option():
                                self._token('{')
                                self.___()
                                with self._optional():
                                    self._dictorsetmaker_()
                                self.name_last_node('@')
                                self.___()
                                self._token('}')
                            with self._option():
                                self._string_()
                            with self._option():
                                self._number_()
                            with self._option():
                                self._token('...')
                            with self._option():
                                self._token('None')
                            with self._option():
                                self._token('True')
                            with self._option():
                                self._token('False')
                            self._error('no available options')
                    self._cut()
                with self._option():
                    self._name_()
                self._error('no available options')
        self._cut()

    @tatsumasu()
    def _testlist_comp_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._namedexpr_test_()
                with self._option():
                    self._star_expr_()
                self._error('no available options')
        self.___()
        with self._group():
            with self._choice():
                with self._option():
                    self._comp_for_()
                with self._option():

                    def block1():
                        self._token(',')
                        self.___()
                        with self._group():
                            with self._choice():
                                with self._option():
                                    self._namedexpr_test_()
                                with self._option():
                                    self._star_expr_()
                                self._error('no available options')
                        self._cut()
                        self.___()
                    self._closure(block1)
                    with self._optional():
                        self._token(',')
                self._error('no available options')

    @tatsumasu()
    def _trailer_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('(')
                self.___()
                self._cut()
                with self._optional():
                    self._arglist_()
                self.name_last_node('args')
                self.___()
                self._token(')')
            with self._option():
                self._token('[')
                self.___()
                self._cut()
                self._subscriptlist_()
                self.name_last_node('index')
                self.___()
                self._token(']')
            with self._option():
                self.___()
                self._token('.')
                self._cut()
                self.___()
                self._name_()
                self.name_last_node('dotname')
            self._error('no available options')
        self.ast._define(
            ['args', 'dotname', 'index'],
            []
        )

    @tatsumasu()
    def _subscriptlist_(self):  # noqa
        self._subscript_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self.___()
            self._subscript_()
            self.add_last_node_to_name('@')
            self.___()
        self._closure(block1)
        with self._optional():
            self._token(',')

    @tatsumasu()
    def _subscript_(self):  # noqa
        with self._choice():
            with self._option():
                with self._optional():
                    self._test_()
                self.name_last_node('index')
                self._token(':')
                self._cut()
                self.___()
                self._cut()
                with self._optional():
                    self._test_()
                self.name_last_node('to')
                with self._optional():
                    self._sliceop_()
                self.name_last_node('slice')
            with self._option():
                self._test_()
                self.name_last_node('index')
            self._error('no available options')
        self.ast._define(
            ['index', 'slice', 'to'],
            []
        )

    @tatsumasu()
    def _sliceop_(self):  # noqa
        self._token(':')
        self._cut()
        self.___()
        self._cut()
        with self._optional():
            self._test_()
        self.name_last_node('@')

    @tatsumasu()
    def _exprlist_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._expr_()
                with self._option():
                    self._star_expr_()
                self._error('no available options')
        self.add_last_node_to_name('@')

        def block2():
            self._token(',')
            with self._group():
                with self._choice():
                    with self._option():
                        self._expr_()
                    with self._option():
                        self._star_expr_()
                    self._error('no available options')
            self.add_last_node_to_name('@')
        self._closure(block2)
        with self._optional():
            self._token(',')

    @tatsumasu()
    def _testlist_(self):  # noqa
        self._test_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self._test_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        with self._optional():
            self._token(',')

    @tatsumasu()
    def _dictorsetmaker_(self):  # noqa
        with self._choice():
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._test_()
                            self._token(':')
                            self._cut()
                            self.___()
                            self._test_()
                        with self._option():
                            self._token('**')
                            self._expr_()
                        self._error('no available options')
                self.___()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._comp_for_()
                        with self._option():

                            def block1():
                                self._token(',')
                                self.___()
                                with self._group():
                                    with self._choice():
                                        with self._option():
                                            self._test_()
                                            self._token(':')
                                            self._cut()
                                            self.___()
                                            self._test_()
                                        with self._option():
                                            self._token('**')
                                            self._expr_()
                                        self._error('no available options')
                                self._cut()
                            self._closure(block1)
                            with self._optional():
                                self._token(',')
                        self._error('no available options')
            with self._option():
                with self._group():
                    with self._choice():
                        with self._option():
                            self._test_()
                        with self._option():
                            self._star_expr_()
                        self._error('no available options')
                self.___()
                with self._group():
                    with self._choice():
                        with self._option():
                            self._comp_for_()
                        with self._option():

                            def block5():
                                self._token(',')
                                self.___()
                                with self._group():
                                    with self._choice():
                                        with self._option():
                                            self._test_()
                                        with self._option():
                                            self._star_expr_()
                                        self._error('no available options')
                                self._cut()
                            self._closure(block5)
                            with self._optional():
                                self._token(',')
                        self._error('no available options')
            self._error('no available options')

    @tatsumasu()
    def _classdef_(self):  # noqa
        self._token('class')
        self._cut()
        self._name_()
        self.name_last_node('name')
        with self._optional():
            self._token('(')
            self._cut()
            with self._optional():
                self._arglist_()
            self.name_last_node('args')
            self.___()
            self._token(')')
        self._token(':')
        self._cut()
        self._suite_()
        self.name_last_node('body')
        self.ast._define(
            ['args', 'body', 'name'],
            []
        )

    @tatsumasu()
    def _arglist_(self):  # noqa
        self.___()
        self._argument_()
        self.add_last_node_to_name('@')

        def block1():
            self._token(',')
            self.___()
            self._argument_()
            self.add_last_node_to_name('@')
        self._closure(block1)
        with self._optional():
            self._token(',')
            self._cut()
            self.___()

    @tatsumasu()
    def _argument_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('**')
                self._test_()
            with self._option():
                self._token('*')
                self._test_()
            with self._option():
                self._test_()
                self._token(':=')
                self._cut()
                self.___()
                self._test_()
            with self._option():
                self._test_()
                self._token('=')
                self._cut()
                self.___()
                self._test_()
            with self._option():
                self._test_()
                with self._optional():
                    self._comp_for_()
            self._error('no available options')

    @tatsumasu()
    def _comp_iter_(self):  # noqa
        self.___()
        with self._group():
            with self._choice():
                with self._option():
                    self._comp_for_()
                with self._option():
                    self._comp_if_()
                self._error('no available options')

    @tatsumasu()
    def _sync_comp_for_(self):  # noqa
        self._token('for')
        self._cut()
        self._exprlist_()
        self.name_last_node('vars')
        self.___()
        self._token('in')
        self._cut()
        self.___()
        self.name_last_node('test')
        self._or_test_()
        self.___()
        with self._optional():
            self._comp_iter_()
        self.name_last_node('comp')
        self.ast._define(
            ['comp', 'test', 'vars'],
            []
        )

    @tatsumasu()
    def _comp_for_(self):  # noqa
        self.___()
        with self._optional():
            self._token('async')
            self._cut()
        self.name_last_node('async_')
        self._sync_comp_for_()
        self.name_last_node('comp')
        self.ast._define(
            ['async_', 'comp'],
            []
        )

    @tatsumasu()
    def _comp_if_(self):  # noqa
        self._token('if')
        self._cut()
        self._test_nocond_()
        self.name_last_node('test')
        with self._optional():
            self._comp_iter_()
        self.name_last_node('comp')
        self.ast._define(
            ['comp', 'test'],
            []
        )

    @tatsumasu()
    def _encoding_decl_(self):  # noqa
        self._name_()

    @tatsumasu()
    def _yield_expr_(self):  # noqa
        self._token('yield')
        self._cut()
        with self._optional():
            with self._choice():
                with self._option():
                    self._token('from')
                    self._cut()
                    self._test_()
                    self.name_last_node('from_')
                with self._option():
                    self._testlist_star_expr_()
                    self.name_last_node('args')
                self._error('no available options')
        self.ast._define(
            ['args', 'from_'],
            []
        )

    @tatsumasu()
    def _func_body_suite_(self):  # noqa
        with self._choice():
            with self._option():
                self._NEWLINE_()
                self._cut()
                with self._optional():
                    self._TYPE_COMMENT_()
                    self.name_last_node('type')
                    self._cut()
                    self._NEWLINE_()
                self._cut()
                self._INDENT_()
                self._stmt_()
                self.add_last_node_to_name('stmt')
                self._cut()

                def block2():
                    self._EQDENT_()
                    self._stmt_()
                    self.add_last_node_to_name('stmt')
                    self._cut()
                self._closure(block2)
                self._DEDENT_()
            with self._option():
                self._simple_stmt_()
                self.add_last_node_to_name('stmt')
            self._error('no available options')
        self.ast._define(
            ['type'],
            ['stmt']
        )

    @tatsumasu()
    def _func_type_input_(self):  # noqa
        self._func_type_()
        with self._optional():
            self._NEWLINE_()
        self._ENDMARKER_()

    @tatsumasu()
    def _func_type_(self):  # noqa
        self._token('(')
        with self._optional():
            self._typelist_()
        self.name_last_node('args')
        self._token(')')
        self._token('->')
        self._cut()
        self._test_()
        self.name_last_node('ret')
        self.ast._define(
            ['args', 'ret'],
            []
        )

    @tatsumasu()
    def _typelist_(self):  # noqa
        with self._choice():
            with self._option():
                self._token('**')
                self._cut()
                self._test_()
            with self._option():
                self._token('*')
                with self._optional():
                    self._test_()

                def block0():
                    self._token(',')
                    self._cut()
                    self._test_()
                self._closure(block0)
                with self._optional():
                    self._token(',')
                    self._token('**')
                    self._cut()
                    self._test_()
            with self._option():
                self._token(',')
                with self._optional():
                    self._token('*')
                    self._cut()
                    with self._optional():
                        self._test_()

                    def block1():
                        self._token(',')
                        self._test_()
                    self._closure(block1)
                    with self._optional():
                        self._token(',')
                        self._token('**')
                        self._cut()
                        self._test_()
            with self._option():
                self._test_()

                def block2():
                    self._token(',')
                    self._cut()
                    self._test_()
                self._closure(block2)
                with self._optional():
                    self._token('**')
                    self._cut()
                    self._test_()
            self._error('no available options')

    @tatsumasu()
    def _name_(self):  # noqa
        self._NAME_()

    @tatsumasu()
    def _NAME_(self):  # noqa
        self._void()

    @tatsumasu()
    def __old_name_(self):  # noqa
        self._pattern('[_]*\\w[\\w_]*')
        self._check_name()

    @tatsumasu()
    def _number_(self):  # noqa
        self._NUMBER_()

    @tatsumasu()
    def _NUMBER_(self):  # noqa
        self._void()

    @tatsumasu()
    def __old_number_(self):  # noqa
        with self._choice():
            with self._option():
                self._floatnumber_()
            with self._option():
                self._integer_()
            self._error('no available options')

    @tatsumasu()
    def _integer_(self):  # noqa
        with self._choice():
            with self._option():
                self._bininteger_()
            with self._option():
                self._octinteger_()
            with self._option():
                self._hexinteger_()
            with self._option():
                self._decinteger_()
            self._error('no available options')

    @tatsumasu()
    def _decinteger_(self):  # noqa
        self._pattern('[1-9]([_]?\\d)*|0+([_]?0)*')

    @tatsumasu()
    def _bininteger_(self):  # noqa
        self._pattern('0[bB]([_]?[01])+')

    @tatsumasu()
    def _octinteger_(self):  # noqa
        self._pattern('0[oO]([_]?[0-7])+')

    @tatsumasu()
    def _hexinteger_(self):  # noqa
        self._pattern('0[xX]([_]?[\\da-fA-F])+')

    @tatsumasu()
    def _floatnumber_(self):  # noqa
        with self._choice():
            with self._option():
                self._pattern('[.]\\d([_]?\\d)*([eE][-+]?\\d([_]?\\d)*)?')
            with self._option():
                self._pattern('\\d([_]?\\d)*[.](\\d([_]?\\d)*)?([eE][-+]?\\d([_]?\\d)*)?')
            with self._option():
                self._pattern('\\d([_]?\\d)*[eE][-+]?\\d([_]?\\d)*')
            self._error('no available options')

    @tatsumasu()
    def _string_(self):  # noqa

        def block0():
            self._STRING_()
        self._positive_closure(block0)

    @tatsumasu()
    def _STRING_(self):  # noqa
        self._void()

    @tatsumasu()
    def ___old_string_(self):  # noqa
        with self._group():
            with self._choice():
                with self._option():
                    self._f_string_()
                with self._option():
                    self._n_string_()
                self._error('no available options')
        self._cut()

        def block1():
            self.___()
            with self._group():
                with self._choice():
                    with self._option():
                        self._f_string_()
                    with self._option():
                        self._n_string_()
                    self._error('no available options')
        self._closure(block1)

    @tatsumasu()
    def _n_string_(self):  # noqa
        self._STRING_()

    @tatsumasu()
    def __OLD_STRING_(self):  # noqa
        with self._choice():
            with self._option():
                with self._if():
                    self._pattern('(r[bu]?|[bu]r?)?(\'\'\'|""")')
                self._cut()
                self._pattern('(?xs)\n    (r[bu]?|[bu]r?)?\'\'\'(\\\\\\\\|\\\\\'||\\\\"|\\\\.|.)*?\'\'\'\n    |\n    (r[bu]?|[bu]r?)?"""(\\\\\\\\|\\\\\'||\\\\"|\\\\.|.)*?"""\n    ')
            with self._option():
                with self._if():
                    self._pattern('(r[bu]?|[bu]r?)?["\']')
                self._cut()
                self._pattern('(?xs)\n    (r[bu]?|[bu]r?)?\'(\\\\\\\\|\\\\\'||\\\\"|\\\\.|.)*?\'\n    |\n    (r[bu]?|[bu]r?)?"(\\\\\\\\|\\\\\'||\\\\"|\\\\.|.)*?"\n    ')
            self._error('no available options')

    @tatsumasu()
    def _f_string_(self):  # noqa
        self._FSTRING_()

    @tatsumasu()
    def _FSTRING_(self):  # noqa
        with self._choice():
            with self._option():
                with self._if():
                    self._pattern('f(r[bu]?|[bu]r?)?(\'\'\'|""")')
                self._cut()
                self._pattern('(?xs)\n    f(r[bu]?|[bu]r?)?\'\'\'(.|\\\\|\\\'|\\.)*?\'\'\'\n    |\n    f(r[bu]?|[bu]r?)?"""(.|\\\\|\\"|\\.)*?"""\n    ')
            with self._option():
                with self._if():
                    self._pattern('f(r[bu]?|[bu]r?)?["\']')
                self._cut()
                self._pattern('(?xs)\n    f(r[bu]?|[bu]r?)?\'(.|\\\\|\\\'|\\.)*?\'\n    |\n    f(r[bu]?|[bu]r?)?"(.|\\\\|\\"|\\.)*?"\n    ')
            self._error('no available options')

    @tatsumasu()
    def _NEWLINE_(self):  # noqa
        self._void()

    @tatsumasu()
    def ___(self):  # noqa
        self._void()

    @tatsumasu()
    def _INDENT_(self):  # noqa
        self._void()

    @tatsumasu()
    def _DEDENT_(self):  # noqa
        self._void()

    @tatsumasu()
    def _EQDENT_(self):  # noqa
        self._void()

    @tatsumasu()
    def _ENDMARKER_(self):  # noqa
        self._check_eof()

    @tatsumasu()
    def _TYPE_COMMENT_(self):  # noqa
        self._void()

    @tatsumasu()
    def _ENCODING_(self):  # noqa
        self._void()


class PythonSemantics(object):
    def start(self, ast):  # noqa
        return ast

    def single_input(self, ast):  # noqa
        return ast

    def file_input(self, ast):  # noqa
        return ast

    def eval_input(self, ast):  # noqa
        return ast

    def decorator(self, ast):  # noqa
        return ast

    def decorators(self, ast):  # noqa
        return ast

    def decorated(self, ast):  # noqa
        return ast

    def async_funcdef(self, ast):  # noqa
        return ast

    def funcdef(self, ast):  # noqa
        return ast

    def parameters(self, ast):  # noqa
        return ast

    def typedargslist(self, ast):  # noqa
        return ast

    def parameter_list(self, ast):  # noqa
        return ast

    def parameter_list_posonly(self, ast):  # noqa
        return ast

    def parameter_list_no_posonly(self, ast):  # noqa
        return ast

    def parameter_list_starargs(self, ast):  # noqa
        return ast

    def defparameter(self, ast):  # noqa
        return ast

    def parameter(self, ast):  # noqa
        return ast

    def identifier(self, ast):  # noqa
        return ast

    def expression(self, ast):  # noqa
        return ast

    def typec(self, ast):  # noqa
        return ast

    def __original_typedargslist(self, ast):  # noqa
        return ast

    def tfpdef(self, ast):  # noqa
        return ast

    def vfpdef(self, ast):  # noqa
        return ast

    def varargslist(self, ast):  # noqa
        return ast

    def posarglist(self, ast):  # noqa
        return ast

    def varargslist_no_posonly(self, ast):  # noqa
        return ast

    def varargslist_starargs(self, ast):  # noqa
        return ast

    def vararg(self, ast):  # noqa
        return ast

    def __original_varargslist(self, ast):  # noqa
        return ast

    def stmt(self, ast):  # noqa
        return ast

    def simple_stmt(self, ast):  # noqa
        return ast

    def small_stmt(self, ast):  # noqa
        return ast

    def string_stmt(self, ast):  # noqa
        return ast

    def expr_stmt(self, ast):  # noqa
        return ast

    def annassign(self, ast):  # noqa
        return ast

    def testlist_star_expr(self, ast):  # noqa
        return ast

    def augassign(self, ast):  # noqa
        return ast

    def del_stmt(self, ast):  # noqa
        return ast

    def pass_stmt(self, ast):  # noqa
        return ast

    def flow_stmt(self, ast):  # noqa
        return ast

    def break_stmt(self, ast):  # noqa
        return ast

    def continue_stmt(self, ast):  # noqa
        return ast

    def return_stmt(self, ast):  # noqa
        return ast

    def yield_stmt(self, ast):  # noqa
        return ast

    def raise_stmt(self, ast):  # noqa
        return ast

    def import_stmt(self, ast):  # noqa
        return ast

    def import_name(self, ast):  # noqa
        return ast

    def import_from(self, ast):  # noqa
        return ast

    def import_as_name(self, ast):  # noqa
        return ast

    def dotted_as_name(self, ast):  # noqa
        return ast

    def import_as_names(self, ast):  # noqa
        return ast

    def dotted_as_names(self, ast):  # noqa
        return ast

    def dotted_name(self, ast):  # noqa
        return ast

    def global_stmt(self, ast):  # noqa
        return ast

    def nonlocal_stmt(self, ast):  # noqa
        return ast

    def assert_stmt(self, ast):  # noqa
        return ast

    def compound_stmt(self, ast):  # noqa
        return ast

    def async_stmt(self, ast):  # noqa
        return ast

    def if_stmt(self, ast):  # noqa
        return ast

    def while_stmt(self, ast):  # noqa
        return ast

    def for_stmt(self, ast):  # noqa
        return ast

    def try_stmt(self, ast):  # noqa
        return ast

    def with_stmt(self, ast):  # noqa
        return ast

    def with_item(self, ast):  # noqa
        return ast

    def except_clause(self, ast):  # noqa
        return ast

    def suite(self, ast):  # noqa
        return ast

    def namedexpr_test(self, ast):  # noqa
        return ast

    def test(self, ast):  # noqa
        return ast

    def ordef(self, ast):  # noqa
        return ast

    def test_nocond(self, ast):  # noqa
        return ast

    def lambdef(self, ast):  # noqa
        return ast

    def lambdef_nocond(self, ast):  # noqa
        return ast

    def or_test(self, ast):  # noqa
        return ast

    def and_test(self, ast):  # noqa
        return ast

    def not_test(self, ast):  # noqa
        return ast

    def comparison(self, ast):  # noqa
        return ast

    def comp_op(self, ast):  # noqa
        return ast

    def star_expr(self, ast):  # noqa
        return ast

    def expr(self, ast):  # noqa
        return ast

    def xor_expr(self, ast):  # noqa
        return ast

    def and_expr(self, ast):  # noqa
        return ast

    def shift_expr(self, ast):  # noqa
        return ast

    def arith_expr(self, ast):  # noqa
        return ast

    def term(self, ast):  # noqa
        return ast

    def factor(self, ast):  # noqa
        return ast

    def power(self, ast):  # noqa
        return ast

    def atom_expr(self, ast):  # noqa
        return ast

    def atom(self, ast):  # noqa
        return ast

    def testlist_comp(self, ast):  # noqa
        return ast

    def trailer(self, ast):  # noqa
        return ast

    def subscriptlist(self, ast):  # noqa
        return ast

    def subscript(self, ast):  # noqa
        return ast

    def sliceop(self, ast):  # noqa
        return ast

    def exprlist(self, ast):  # noqa
        return ast

    def testlist(self, ast):  # noqa
        return ast

    def dictorsetmaker(self, ast):  # noqa
        return ast

    def classdef(self, ast):  # noqa
        return ast

    def arglist(self, ast):  # noqa
        return ast

    def argument(self, ast):  # noqa
        return ast

    def comp_iter(self, ast):  # noqa
        return ast

    def sync_comp_for(self, ast):  # noqa
        return ast

    def comp_for(self, ast):  # noqa
        return ast

    def comp_if(self, ast):  # noqa
        return ast

    def encoding_decl(self, ast):  # noqa
        return ast

    def yield_expr(self, ast):  # noqa
        return ast

    def func_body_suite(self, ast):  # noqa
        return ast

    def func_type_input(self, ast):  # noqa
        return ast

    def func_type(self, ast):  # noqa
        return ast

    def typelist(self, ast):  # noqa
        return ast

    def name(self, ast):  # noqa
        return ast

    def NAME(self, ast):  # noqa
        return ast

    def _old_name(self, ast):  # noqa
        return ast

    def number(self, ast):  # noqa
        return ast

    def NUMBER(self, ast):  # noqa
        return ast

    def _old_number(self, ast):  # noqa
        return ast

    def integer(self, ast):  # noqa
        return ast

    def decinteger(self, ast):  # noqa
        return ast

    def bininteger(self, ast):  # noqa
        return ast

    def octinteger(self, ast):  # noqa
        return ast

    def hexinteger(self, ast):  # noqa
        return ast

    def floatnumber(self, ast):  # noqa
        return ast

    def string(self, ast):  # noqa
        return ast

    def STRING(self, ast):  # noqa
        return ast

    def __old_string(self, ast):  # noqa
        return ast

    def n_string(self, ast):  # noqa
        return ast

    def _OLD_STRING(self, ast):  # noqa
        return ast

    def f_string(self, ast):  # noqa
        return ast

    def FSTRING(self, ast):  # noqa
        return ast

    def NEWLINE(self, ast):  # noqa
        return ast

    def _(self, ast):  # noqa
        return ast

    def INDENT(self, ast):  # noqa
        return ast

    def DEDENT(self, ast):  # noqa
        return ast

    def EQDENT(self, ast):  # noqa
        return ast

    def ENDMARKER(self, ast):  # noqa
        return ast

    def TYPE_COMMENT(self, ast):  # noqa
        return ast

    def ENCODING(self, ast):  # noqa
        return ast


def main(filename, start=None, **kwargs):
    if start is None:
        start = 'start'
    if not filename or filename == '-':
        text = sys.stdin.read()
    else:
        with open(filename) as f:
            text = f.read()
    parser = PythonParser()
    return parser.parse(text, rule_name=start, filename=filename, **kwargs)


if __name__ == '__main__':
    import json
    from tatsu.util import asjson

    ast = generic_main(main, PythonParser, name='Python')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(asjson(ast), indent=2))
    print()
